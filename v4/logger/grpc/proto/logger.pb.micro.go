// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logger.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Logger service

func NewLoggerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Logger service

type LoggerService interface {
	Write(ctx context.Context, opts ...client.CallOption) (Logger_WriteService, error)
}

type loggerService struct {
	c    client.Client
	name string
}

func NewLoggerService(name string, c client.Client) LoggerService {
	return &loggerService{
		c:    c,
		name: name,
	}
}

func (c *loggerService) Write(ctx context.Context, opts ...client.CallOption) (Logger_WriteService, error) {
	req := c.c.NewRequest(c.name, "Logger.Write", &WriteRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &loggerServiceWrite{stream}, nil
}

type Logger_WriteService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*WriteRequest) error
}

type loggerServiceWrite struct {
	stream client.Stream
}

func (x *loggerServiceWrite) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *loggerServiceWrite) Close() error {
	return x.stream.Close()
}

func (x *loggerServiceWrite) Context() context.Context {
	return x.stream.Context()
}

func (x *loggerServiceWrite) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *loggerServiceWrite) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *loggerServiceWrite) Send(m *WriteRequest) error {
	return x.stream.Send(m)
}

// Server API for Logger service

type LoggerHandler interface {
	Write(context.Context, Logger_WriteStream) error
}

func RegisterLoggerHandler(s server.Server, hdlr LoggerHandler, opts ...server.HandlerOption) error {
	type logger interface {
		Write(ctx context.Context, stream server.Stream) error
	}
	type Logger struct {
		logger
	}
	h := &loggerHandler{hdlr}
	return s.Handle(s.NewHandler(&Logger{h}, opts...))
}

type loggerHandler struct {
	LoggerHandler
}

func (h *loggerHandler) Write(ctx context.Context, stream server.Stream) error {
	return h.LoggerHandler.Write(ctx, &loggerWriteStream{stream})
}

type Logger_WriteStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*WriteRequest, error)
}

type loggerWriteStream struct {
	stream server.Stream
}

func (x *loggerWriteStream) Close() error {
	return x.stream.Close()
}

func (x *loggerWriteStream) Context() context.Context {
	return x.stream.Context()
}

func (x *loggerWriteStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *loggerWriteStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *loggerWriteStream) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
